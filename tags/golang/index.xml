<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>golang on Blog</title>
    <link>https://trungnguyen1909.github.io/blog/tags/golang/</link>
    <description>Recent content in golang on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>ntrung03@gmail.com (Nguyen Hoang Trung)</managingEditor>
    <webMaster>ntrung03@gmail.com (Nguyen Hoang Trung)</webMaster>
    <copyright>Â©{year}, All Rights Reserved. Content licensed under CC BY 4.0</copyright>
    <lastBuildDate>Thu, 22 Nov 2018 21:30:28 +0700</lastBuildDate>
    
        <atom:link href="https://trungnguyen1909.github.io/blog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>RITSEC18 Gimme sum fud</title>
        <link>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Gimme-sum-fud/</link>
        <pubDate>Thu, 22 Nov 2018 21:30:28 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Thu, 22 Nov 2018 21:30:28 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Gimme-sum-fud/</guid>
        <description>The binary loads the flag.txt to the memory and asks us to provide input.
Interesting things is that it loads to the same memory segment with the input.
Debugging locally, I found it at the offset 752 from the first input bytes.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>RITSEC</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>golang</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>RITSEC18 Yet another HR Management Framework</title>
        <link>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Yet-another-HR-Management-Framework/</link>
        <pubDate>Thu, 22 Nov 2018 21:30:28 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Thu, 22 Nov 2018 21:30:28 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Yet-another-HR-Management-Framework/</guid>
        <description>By judging the program&amp;rsquo;s interface, we know that it was a heap challenge.
Spent quite a lot of time reversing it, I figured it out that it malloc a few bytes for the person struct on the heap, then the name will be malloc with the size entered and that address will be put in the person struct.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>RITSEC</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>heap</category>
            
          
            
              <category>golang</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>