<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>pwn on Blog</title>
    <link>https://trungnguyen1909.github.io/blog/tags/pwn/</link>
    <description>Recent content in pwn on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>ntrung03@gmail.com (Nguyen Hoang Trung)</managingEditor>
    <webMaster>ntrung03@gmail.com (Nguyen Hoang Trung)</webMaster>
    <copyright>Â©{year}, All Rights Reserved. Content licensed under CC BY 4.0</copyright>
    <lastBuildDate>Mon, 28 Dec 2020 17:22:26 +0700</lastBuildDate>
    
        <atom:link href="https://trungnguyen1909.github.io/blog/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Pwnable01 scull - Whitehat Grandprix 06</title>
        <link>https://trungnguyen1909.github.io/blog/post/WhiteHatGrandPrix06/Pwn01/</link>
        <pubDate>Mon, 28 Dec 2020 17:22:26 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Mon, 28 Dec 2020 17:22:26 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/WhiteHatGrandPrix06/Pwn01/</guid>
        <description>Pwnable01 Intro Hi guys, this is the writeup for the challenge Pwnable01 from Whitehat Grandprix 06 Final
You may want to checkout the exploit code and challenge&amp;rsquo;s source
Challenge  #pwn01:
You can ssh into our server as a low-privilege user.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>WhiteHatGrandprix</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>linux</category>
            
          
            
              <category>kernel</category>
            
          
            
              <category>race-condition</category>
            
          
            
              <category>use-after-free</category>
            
          
            
              <category>UAF</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Google CTF 2020 teleport: Chromium sandbox escape</title>
        <link>https://trungnguyen1909.github.io/blog/post/GGCTF20/</link>
        <pubDate>Wed, 02 Sep 2020 19:48:00 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Wed, 02 Sep 2020 19:48:00 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/GGCTF20/</guid>
        <description>Teleport  Please write a full-chain exploit for Chrome. The flag is at /home/user/flag. Maybe there&amp;rsquo;s some way to tele&amp;lt;port&amp;gt; it out of there?
 1. Story Hi, last week I participated in Google CTF 2020 with my team pwnPHOfun</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>GGCTF2020</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>sandbox</category>
            
          
            
              <category>chromium</category>
            
          
            
              <category>browser</category>
            
          
            
              <category>mojo</category>
            
          
            
              <category>reversing</category>
            
          
            
              <category>offset</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>PlaidCTF2020 PlaidStore mojo chromium</title>
        <link>https://trungnguyen1909.github.io/blog/post/PlaidCTF2020/</link>
        <pubDate>Wed, 22 Apr 2020 19:42:49 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Wed, 22 Apr 2020 19:42:49 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/PlaidCTF2020/</guid>
        <description>PlaidStore Story Hi, everyone, this is the writeup for the challenge 500pts &amp;ldquo;mojo&amp;rdquo; of PlaidCTF 2020.
As usual, I got the flag after the CTF has ended :&amp;lt;
Well, currently I am not in any active teams, so I decided to pick a hard challenge and do it on my own.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>PlaidCTF2020</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>chromium</category>
            
          
            
              <category>browser</category>
            
          
            
              <category>mojo</category>
            
          
            
              <category>use-after-free</category>
            
          
            
              <category>UAF</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>pwning your kernelz: macOS 0day LPE</title>
        <link>https://trungnguyen1909.github.io/blog/post/CampCTF/PwningKernelz/</link>
        <pubDate>Wed, 04 Sep 2019 23:38:50 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Wed, 04 Sep 2019 23:38:50 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/CampCTF/PwningKernelz/</guid>
        <description>pwning your kernelz Background Hi everyone,
This is the writeup for the challenge pwning your kernelz, created by Linus Henze(@LinusHenze),
I came across this challenge when Linus tweeted a status update for the CTF.
Of course, I didn&amp;rsquo;t solve this challenge during the time of the CTF.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>Camp-CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>kernel</category>
            
          
            
              <category>xnu</category>
            
          
            
              <category>0day</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>kpets FacebookCTF 2019 QR</title>
        <link>https://trungnguyen1909.github.io/blog/post/FBCTF19-Qual/kpets/</link>
        <pubDate>Wed, 12 Jun 2019 23:15:34 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Wed, 12 Jun 2019 23:15:34 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/FBCTF19-Qual/kpets/</guid>
        <description>kpets  welcome to Kernel Pets Simulator!
  We wrote a pet store application that was too slow, so we made a kernel module for it instead.
  Author: pippinthedog
 Hi everyone, this is the writeup for the Facebook CTF 2019 Qualification Round kpets challenge</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>FBCTF</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>kernel</category>
            
          
            
              <category>linux</category>
            
          
            
              <category>race-condition</category>
            
          
            
              <category>double-fetch</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>IPwnKit DEFCON CTF 26 QR</title>
        <link>https://trungnguyen1909.github.io/blog/post/DEFCON26-Qual/iPwnKit/</link>
        <pubDate>Sun, 21 Apr 2019 00:46:45 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Sun, 21 Apr 2019 00:46:45 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/DEFCON26-Qual/iPwnKit/</guid>
        <description>IPwnKit  Come and take a bite of the Apple!
  We have reserved you a very special place at the WWPC (World Wide Pwning Conference).
  Email ipwnkit@gmail.com to RSVP and we will reply with your invite.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>DEFCON-CTF</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>xnu</category>
            
          
            
              <category>IOKit</category>
            
          
            
              <category>race-condition</category>
            
          
            
              <category>double-fetch</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>AceBear Security Contest House-of-loop</title>
        <link>https://trungnguyen1909.github.io/blog/post/AceBear2019/house_of_loop/</link>
        <pubDate>Mon, 08 Apr 2019 14:35:17 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Mon, 08 Apr 2019 14:35:17 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/AceBear2019/house_of_loop/</guid>
        <description>House-of-loop Hi everyone, this is the writeup for the challenge House-of-loop in the AceBear Security Contest 2019
You may want to checkout the exploit code
Description We are given a stripped ELF x64 binary which can be interacted with, our task is to get remote code execution(RCE).</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>AceBear</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>heap</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>TetCTF babySandbox</title>
        <link>https://trungnguyen1909.github.io/blog/post/tetctf/babysandbox/</link>
        <pubDate>Fri, 22 Feb 2019 23:17:46 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Fri, 22 Feb 2019 23:17:46 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/tetctf/babysandbox/</guid>
        <description>Baby Sandbox This is a challenge of TetCTF, which is hosted from Jan 1st to Jan 7th by MeePwn Team of Vietnam
You may want to checkout the exploit code
Challenge description We are given 2 binary, one is sandbox and the other one is program.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>TetCTF</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>sandbox</category>
            
          
            
              <category>ROP</category>
            
          
            
              <category>NX</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>matesCTF KSMASH</title>
        <link>https://trungnguyen1909.github.io/blog/post/matesctf/KSMASH/</link>
        <pubDate>Mon, 18 Feb 2019 16:48:13 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Mon, 18 Feb 2019 16:48:13 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/matesctf/KSMASH/</guid>
        <description>KSMASH - Kernel Stack Smashing Background This is a Linux Kernel Module(LKM) exploitation challenge by nyaacate@gmail.com host in Round 3 MatesCTF 2018-2019
I solved this challenge overtime :&amp;lt;
But It seems that no team solved this so I still sent the exploit to the challenge author for testing and also wrote this writeup.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>matesCTF</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>kernel</category>
            
          
            
              <category>linux</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>35C3 CTF Pillow</title>
        <link>https://trungnguyen1909.github.io/blog/post/35c3/pillow/</link>
        <pubDate>Fri, 15 Feb 2019 00:47:48 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Fri, 15 Feb 2019 00:47:48 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/35c3/pillow/</guid>
        <description>Pillow Background This is the writeup for the challenge Pillow, created by Samuel GroÃ(@saelo) of Project Zero, of 35C3 CTF annually organized by @EatSleepPwnRpt happening at the end of year 2018.
I didn&amp;rsquo;t solve this challenge during the CTF, when revisiting this challenge after checkout @LinusHenze repo, I have a big learning oppuntunity to checkout XNU exploitation, which was completely new to me.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>35C3-CTF</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>xnu</category>
            
          
            
              <category>mach</category>
            
          
            
              <category>mig</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>RITSEC18 Gimme sum fud</title>
        <link>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Gimme-sum-fud/</link>
        <pubDate>Thu, 22 Nov 2018 21:30:28 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Thu, 22 Nov 2018 21:30:28 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Gimme-sum-fud/</guid>
        <description>The binary loads the flag.txt to the memory and asks us to provide input.
Interesting things is that it loads to the same memory segment with the input.
Debugging locally, I found it at the offset 752 from the first input bytes.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>RITSEC</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>golang</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>RITSEC18 Yet another HR Management Framework</title>
        <link>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Yet-another-HR-Management-Framework/</link>
        <pubDate>Thu, 22 Nov 2018 21:30:28 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Thu, 22 Nov 2018 21:30:28 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/RITSEC-2018/Yet-another-HR-Management-Framework/</guid>
        <description>By judging the program&amp;rsquo;s interface, we know that it was a heap challenge.
Spent quite a lot of time reversing it, I figured it out that it malloc a few bytes for the person struct on the heap, then the name will be malloc with the size entered and that address will be put in the person struct.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>RITSEC</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>heap</category>
            
          
            
              <category>golang</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>matesCTF babyOVERFLOW</title>
        <link>https://trungnguyen1909.github.io/blog/post/matesctf/babyOVERFLOW/</link>
        <pubDate>Wed, 10 Oct 2018 11:35:23 +0700</pubDate>
        <author>ntrung03@gmail.com (Nguyen Hoang Trung)</author>
        <atom:modified>Wed, 10 Oct 2018 11:35:23 +0700</atom:modified>
        <guid>https://trungnguyen1909.github.io/blog/post/matesctf/babyOVERFLOW/</guid>
        <description>babyOVERFLOW Exploit
TÃªn file bÃ i nÃ y gá»£i Ã½ ráº¥t nhiá»u.
&amp;ldquo;baby&amp;rdquo; thÆ°á»ng ÄÆ°á»£c dÃ¹ng trong CTF chá» nhá»¯ng bÃ i ÄÆ¡n giáº£n dÃ nh cho ngÆ°á»i má»i
&amp;ldquo;OVERFLOW&amp;rdquo; á» ÄÃ¢y thÃ¬ chá» Äáº¿n stack buffer overflow.
Cháº¡y nÃ³, nháº­p vÃ o thÃ¬ nÃ³ in ra láº¡i ÄÃºng nhÆ° tháº¿.</description>
        
        <dc:creator>Nguyen Hoang Trung</dc:creator>
        
        
        
        
          
            
              <category>matesCTF</category>
            
          
            
              <category>CTF</category>
            
          
            
              <category>pwn</category>
            
          
            
              <category>stack-buffer-overflow</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>